## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("pneumonia",1:3)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[order(df_sub$State),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("pneumonia",5)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[order(df_sub$State),]
df_sub <- df_sub[1:num,]
df_sub[, c(1,2)]
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("pneumonia",5)
tail(rankall("pneumonia", 3), 3)
rankhospital("AL","heart attack",20)
rankhospital("AR","heart attack",20)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
list_states <- unique(as.character(df$State)) ##Gather all the states and store them into a variable
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[order(df_sub$State),]
df_sub <- df_sub[1:num,]
df_sub[, c(1,2)]
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("heart attack",20)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA,] ##Select the specific state from the State column
df_sub
}
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA,)] ##Select the specific state from the State column
df_sub
}
rankall()
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA),] ##Select the specific state from the State column
df_sub
}
rankall
rankall()
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA==outcome),] ##Select the specific state from the State column
df_sub
}
ranall("HA")
rankall("HA")
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA),] ##Select the specific state from the State column
df_sub
}
rankall()
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA),] ##Select the specific state from the State column
list_states <- unique(as.character(df$State)) ##Gather all the states and store them into a variable
count_states <- length(list_states)  ##Count the length of the list of states and store into a variable
for(i in 1:count_states){  ##loop as many times equal to the length of the list of the states
x[i] <- list_states[i]
}
data.frame(x, stringsAsFactors=FALSE)
}
rankall()
with(df,tapply(Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, State, mean))
na.omit(df)
with(df,tapply(Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, State, mean))
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
View(df)
View(df)
View(df)
with(df,tapply(Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, State, mean))
df <- na.omit(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df <- na.omit(outcome)
View(df)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages(xlsx)
install.packages("http://cran.r-project.org/src/contrib/xlsx_0.5.7.tar.gz")
install.packages("xlsx")
read.xlsx()
require("xlsx")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
require("xlsx")
Sys.setenv(JAVA_Home='C:\Program Files (x86)\Java\jre1.8.0_45')
Sys.setenv(JAVA_HOME='C:\Program Files (x86)\Java\jre1.8.0_45')
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_45')
require(xlsx)
install.packages("xlsx")
require("xlsx")
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
install.packages("http://cran.r-project.org/src/contrib/RMySQL_0.10.3.tar.gz")
install.packages("RMySQL")
ucscDb <- dbConnnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
ucscDb <- dbConnnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
genome-mysql.cse.ucsc.edu
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB,"show databases;"; dbDisconnect(ucuscDB);
result <- dbGetQuery(ucscDB,"show databases;"; dbDisconnect(ucscDB);
result
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB);
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
allTables
alltables[[1:5]]
alTables[[1:5]]
allTables[[1:5]]
allTables[1:5]
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches beween 1 and 3")
alltables[1:4]
hg19 <- dbConnect(MySQL(), user=”genome”, db=”hg19”, host=”genome-mysql.cse.ucsc.edu”)
hg19 <- dbConnect(MySQL(), user=”genome”, db="hg19", host="genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches beween 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches beween 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2")
warnings()
fetch(query)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
dbCleaResult(query)
dbClearResult(query)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb
query
query1 <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query1 <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query2 <- dbSendQuery(hg19, "select * from affyU133Plus2")
dbConnect(ucuscDb)
dbConnect(ucscDb)
query2 <- dbSendQuery(hg19, "select * from affyU133Plus2")
dbDisconnect(ucscdb)
dbDisconnect(ucscDb)
ucscDb
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query2 <- dbSendQuery(hg19, "select * from affyU133Plus2")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
sig <- sign_oauth1.0(myapp, token="ad49e4225a00d381b132f365c783fb3fb8885f0f")
homeTL <- GET("https://api.github.com/users/jtleek/repos", sig)
json1 = content(homeTL)
json1
library(jsonlite)
library(curl)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
myapp = oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
sig = sign_oauth1.0(myapp, token="ad49e4225a00d381b132f365c783fb3fb8885f0f")
homeTL = GET("https://api.github.com/users/jtleek/repos", sig)
homeTL
oauth_endpoints("github")
myapp = oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
sig = sign_oauth1.0(myapp, token="ad49e4225a00d381b132f365c783fb3fb8885f0f")
homeTL = GET("GET https://github.com/login/oauth/authorize", sig)
library(httr)
oauth_endpoints("github")
myapp = oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
sig = sign_oauth1.0(myapp, token="ad49e4225a00d381b132f365c783fb3fb8885f0f")
homeTL = GET("https://github.com/login/oauth/authorize", sig)
homeTL
library(httr)
oauth_endpoints("github")
myapp = oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
sig = sign_oauth1.0(myapp, token="ad49e4225a00d381b132f365c783fb3fb8885f0f")
homeTL = GET("https://api.github.com/users/jtleek/repos", sig)
homeTL
myapp = oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
sig = sign_oauth1.0(myapp, token="ad49e4225a00d381b132f365c783fb3fb8885f0f")
homeTL = GET("https://api.github.com/users/jtleek/repos", myapp)
homeTL
lbrary(httr)
library(httr)
homeTL = GET("https://api.github.com/users/jtleek/repos", myapp)
myapp = oauth_app("github", key = "1c5d9a2c98dfc51fff39", secret = "ea74bd34f076cae086e438dd4e3d4492de6849bf")
homeTL = GET("https://api.github.com/users/jtleek/repos", myapp)
homeTL
sig = sign_oauth2.0(myapp, token="ad49e4225a00d381b132f365c783fb3fb8885f0f")
sig = sign_oauth2.0(myapp)
sig = sign_oauth1.0(myapp)
homeTL = GET("https://api.github.com/users/jtleek/repos", sig)
homeTL
GET(""https://api.github.com/users/jtleek/repos"")
GET("https://api.github.com/users/jtleek/repos")
url <- GET("https://api.github.com/users/jtleek/repos")
url
library(curl)
library(jsonlite)
fromJSON(url)
jsonDATA <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonDATA
?detai
?details
?info
?help
?GET
myapp <- oauth_app("github", "1c5d9a2c98dfc51fff39", "ea74bd34f076cae086e438dd4e3d4492de6849bf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
content(req)
file <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
?download.file
file <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",/Users/james/SkyDrive/Data Science/datascience_coursera)
file <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", Users/james/SkyDrive/Data Science/datascience_coursera)
file <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="/Users/james/Desktop/Test")
file <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="/Users/james/SkyDrive/Data Science/Test")
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
file <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(file)
install.packages(sqldf)
install.packages("sqldf")
sqldf("select pwgtp1 from file")
library(sqldf)
sqldf("select pwgtp1 from file")
sqldf("select pwgtp1 from file where AGEP < 50")
unique(file$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select unique AGEP from file")
sqldf("select distinct AGEP from file")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
library(XML)
html <- htmlTreParse(con, useInternalNodes=T)
html <- htmlTreeParse(con, useInternalNodes=T)
con <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreParse(con, useInternalNodes=T)
html <- htmlTreeParse(con, useInternalNodes=T)
?nchar
nchar(html)
html
string <- readlines(html)
string <- readLines(html)
string <- readLines(con)
string
sapply(string[c(10, 20, 30, 100)], nchar)
con
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(hurl, useinternalNodes=T)
html <- htmlTreeParse(hurl)
html
SApply(html[c(10, 20, 30, 100)], nchar)
sapply(html[c(10, 20, 30, 100)], nchar)
xpathSApply(html[c(10, 20, 30, 100)], nchar)
con <- con(html)
con <- html
readLines(con)
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
con
html <- readLines(con)
html
xpathSApply(html,"//title",xmlValue)
SApply(html,"//title",xmlValue)
sapply(html,"//title",xmlValue)
sapply(html,"div",xmlValue)
sapply(html[c(10, 20, 30, 100)], nchar)
?sapply
sapply(html)
sapply(html,fivenum)
getwd()
setwd("C:/Users/james/SkyDrive/Data Science/DataScience_Coursera/R Programming/Getting and Cleaning Data-Project")
features <- read.table(features.txt, sep=",", header=TRUE)
getwd()
setwd("C:/Users/james/SkyDrive/Data Science/DataScience_Coursera/R Programming/Getting and Cleaning Data-Project/UCI HAR Dataset")
features <- read.table(features.txt, sep=",", header=TRUE)
getwd()
features <- read.table("features.txt", sep=",", header=TRUE)
features
subject <- read.table("subject_train.txt", sep=",", header=TRUE)
setwd("C:/Users/james/SkyDrive/Data Science/DataScience_Coursera/R Programming/Getting and Cleaning Data-Project/UCI HAR Dataset/train")
subject <- read.table("subject_train.txt", sep=",", header=TRUE)
subject
head(subject)
head(feature)
head(features)
features
subject <- read.table("subject_train.txt", header=TRUE)
subject
head(subject)
features <- read.table("features.txt", header=TRUE)
setwd("C:/Users/james/SkyDrive/Data Science/DataScience_Coursera/R Programming/Getting and Cleaning Data-Project/UCI HAR Dataset")
features <- read.table("features.txt", header=TRUE)
features
features <- read.table("features.txt", sep=")"header=TRUE)
features <- read.table("features.txt", sep=")",header=TRUE)
features <- read.table("features.txt", sep="()",header=TRUE)
features <- read.table("features.txt", sep="",header=TRUE)
features
features <- read.table("features.txt", sep=" ",header=TRUE)
features
setwd("C:/Users/james/SkyDrive/Data Science/DataScience_Coursera")
cd R Programming
cd R/ Programming
setwd("C:\\Users\\james\\SkyDrive\\Data Science\\DataScience_Coursera\\R Programming\\Getting and Cleaning Data-Project")
features <- read.table("./UCI HAR Dataset/features.txt", header=TRUE)
features
features <- read.table("./UCI HAR Dataset/features.txt", header=TRUE)
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt", header=TRUE)
x_train <- read.table("./UCI HAR Dataset/train/x_train.txt", header=TRUE)
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt", header=TRUE)
head(x_train)
x_train[1,1:3]
count(nrows(x_train))
nrows(x_train)
?rows
?row
head(y_train)
head(subject_train)
colnames(xTrain) = features[,2];
colnames(x_train)        = features[,2];
x_train[,2]
head(x_train[,2])
head(x_train[,2:3])
head(subject_train)
colnames(subject_train) <- "subjectID"
head(subject_train)
